/*
Reverse bits of a given 32 bits unsigned integer.

For example, given input 43261596 (represented in binary as 00000010100101000001111010011100), return 964176192 (represented in binary as 00111001011110000010100101000000).

Follow up:
If this function is called many times, how would you optimize it?
(The idea is to use a 256-entry (8 bits) lookup table, which is generated by other means and copied. Then we check the lookup table four times to get the result)
(https://leetcode.com/discuss/27709/what-point-follow-function-called-many-times-would-optimize)
Related problem: Reverse Integer
*/

public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int res = 0;
        for (int i = 0; i < 32; i ++){
        	if (())
        }
    }
}