/*
Reverse bits of a given 32 bits unsigned integer.

For example, given input 43261596 (represented in binary as 00000010100101000001111010011100), return 964176192 (represented in binary as 00111001011110000010100101000000).

Follow up:
If this function is called many times, how would you optimize it?
(The idea is to use a 256-entry (8 bits) lookup table, which is generated by other means and copied. Then we check the lookup table four times to get the result)
(https://leetcode.com/discuss/27709/what-point-follow-function-called-many-times-would-optimize)
Related problem: Reverse Integer
*/

public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int res = 0;
        for (int i = 0; i < 32; i ++){
        	if (((1 << i) & n) != 0){
        		res |= 1 << (31 - i);
        	}
        }
        return res;
    }
}

/*
Similar to Reverse Integer - https://leetcode.com/problems/reverse-integer/

// use string
public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        String str = Integer.toBinaryString(n);

        // expand to 32 bits
        int length = str.length();
        for (int i = 0; i < 32 - length; i++) {
            str = "0" + str;
        }

        // convert to unsigned int
        long result = 0;
        char[] arr = str.toCharArray();
        for (int i = 0; i < arr.length; i++) {
            result += Integer.parseInt(arr[i] + "") * Math.pow(2, i);
        }

        return (int)result;
    }
}

// use stringbuilder
String str=Integer.toUnsignedString(n,2);
    StringBuilder sb=new StringBuilder();
       for(int i=str.length(); i<32;i++){
           sb.append("0");
       }
       sb.append(str);
     return (int)  Integer.parseUnsignedInt(sb.reverse().toString(),2);

// system reverse method
Integer.reverse(n)


Reference:
https://leetcode.com/discuss/27484/java-solution-without-explicit-bits-manipulation
https://leetcode.com/discuss/27577/share-my-java-code
*/